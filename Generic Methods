import java.util.*;

class GenericClass<T>{
    T item;

    GenericClass(T item){
        this.item = item;
    }

    void set(T change_item){
        this.item = change_item;
    }

    T get(){
        return this.item;
    }
    }

    //how to initialize
    /* Generic<DataType> g = new Generic<>(); */

    //example: Generic<Integer> g = new Generic<>(5);
    ////Containers like ArrayList, Vectors, PriorityQueues, etc are Generic classes! (But T must  BE REFERENCE DATA TYPES!)


class MoreThanOneGeneric<T, U, V> {

        T item1;
        U item2;
        V item3;
       
       MoreThanOneGeneric(T item1, U item2, V item3){
            this.item1 = item1;
            this.item2 = item2;
            this.item3 = item3;
            }
         //write more methods with these types denoted as T, U, V
         
         T get() {} 
         U get () {}
         V get () {} //getters only return one data type (unless we use toString(), convert to one single string and return that, in which case, return type is String.
              }



public class GenericMethods { //Please note : Generics are only for reference data types (not primitives like int, short, long, float, boolean, etc)

    public static <T> void iterate(T[] arr){
        for(T t: arr) System.out.print(t + " ");
        System.out.println();
    }

    public static <T> T return_something(T[] arr){
        return arr[0];
    }
    public static <T> int length(T[] arr){
        return arr.length;
    }
    
    public static <T, U> void iterate(T[] arr, U[] arr1){ //overloaded for more than one generic type
        for(T t: arr) System.out.print(t + " ");
        System.out.println();
        for(U u: arr1) System.out.print(u + " ");
        System.out.println();
    }

    public static void main(String[] args){


        Integer[] arr = {1,2,3};
        Double[] arr1 = {1.3, 8.9, 5.23};
        String[] arr2 = {"Jack", "Ryan", "Tim"};

        iterate(arr);
        iterate(arr2);
        iterate(arr1);

        System.out.println(return_something(arr));
        System.out.println(return_something(arr1));
        System.out.println(return_something(arr2));

        System.out.println(length(arr));
        System.out.println(length(arr1));
        System.out.println(length(arr2));
        
        
        iterate(arr, arr2);


    }
    




}
