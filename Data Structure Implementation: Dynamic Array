//import java.util.*;
//Dynamic Generic Array with basic features, add, remove(idx), pop(), print(), insert(idx, val)

class DynArray<T>{

    private int size;
    private T[] arr;
    private int capacity = 10;


    @SuppressWarnings("unchecked")
    public DynArray(){
        this.size = 0;
        this.arr = (T[]) new Object[capacity];

    }
    @SuppressWarnings("unchecked")
    public DynArray(int capacity){
        this.capacity = capacity;
        this.size = 0;
        this.arr = (T[]) new Object[this.capacity];
    }

    @SuppressWarnings("unchecked")
    public void add(T item){
        if(this.size==this.capacity-1){
            T[] arr1 = (T[]) new Object[this.capacity*2];
            this.capacity *=2;
            for(int i=0; i < this.size; i++){
                arr1[i] = arr[i];
            }
            this.arr = arr1;
            //System.out.println(Arrays.toString(arr));
        }
        this.arr[this.size] = item;
        this.size++;
    }
    public void remove(int idx){
        while(idx!=this.size){
            this.arr[idx] = this.arr[idx+1];
            idx++;
            
        }
        this.size--;
    }
    public void pop(){
        this.arr[this.size-1] = null;
        this.size--;
    }
    @SuppressWarnings("unchecked")
    public void insert(int idx, T val){
        if(this.size==this.capacity-1){
            T[] arr1 = (T[]) new Object[this.capacity*2];
            for(int i =0; i < this.size; i++){
                arr1[i] = this.arr[i];
            }
            this.arr = arr1;
        }
        int traverseback = this.size;
        while (traverseback!=idx){
            this.arr[traverseback] = this.arr[traverseback-1];
            traverseback--;
        }
        this.arr[traverseback] = val;
        this.size++;
    }
    public T get(int idx){
        return this.arr[idx];
    }
    public int size(){
        return this.size;
    }

    public void print(){
        for(int i =0; i < this.size; i++){
            if(i==0)System.out.print("[" + this.arr[i] + ", ");
            else if(i==this.size-1)System.out.print(this.arr[i]+"]");
            else System.out.print(this.arr[i]+ ", ");
        }
        System.out.println();
    }
    public int search_idx(T item){
        for(int i=0; i < this.size; i++){
            if(this.arr[i] == item) return i;
        }
        return -1;
    }
    public boolean isEmpty(){
        return this.size == 0;
    }
}



public class DynamicArrays {

    public static void main(String[] args){

        DynArray<Integer> dynarr = new DynArray<>();

        for(int i=11; i>= 0; i--) dynarr.add(i);
        dynarr.print();

        dynarr.remove(3);
        dynarr.print();

        dynarr.remove(4);
        dynarr.print();

        dynarr.pop();
        dynarr.print();

        dynarr.insert(2, 10);
        dynarr.print();

        dynarr.insert(0, 100);
        dynarr.print();
        
        dynarr.insert(dynarr.size(), 1000);
        dynarr.print();

        System.out.println(dynarr.get(5));
        
        System.out.println(dynarr.size());

        System.out.println(dynarr.search_idx(10)); //returns first 10

        System.out.println(dynarr.search_idx(101)); // -1

        System.out.println(dynarr.isEmpty()); //false

        DynArray<String> a = new DynArray<>();

        System.out.println(a.isEmpty()); // true
    }
    
}
