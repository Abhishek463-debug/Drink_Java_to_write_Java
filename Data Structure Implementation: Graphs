import java.util.*;

class Graph<K> {
   private HashMap<K, HashSet<K>> graph;

    Graph(){
        this.graph = new HashMap<>();
    }

    public void addNode(K key){
        if(!this.graph.containsKey(key))this.graph.put(key, new HashSet<>());   
    }

    public void addEdge(K node1, K node2){
        if(!this.graph.containsKey(node1) && !this.graph.containsKey(node2)){
            this.graph.put(node1, new HashSet<>());
            this.graph.put(node2, new HashSet<>());
            this.graph.get(node1).add(node2);
            this.graph.get(node2).add(node1);
        }
        else if(!this.graph.containsKey(node2)){
            this.graph.put(node2, new HashSet<>());
            this.graph.get(node1).add(node2);
            this.graph.get(node2).add(node1);

        }
        else if(!this.graph.containsKey(node1)){
            this.graph.put(node1, new HashSet<>());
            this.graph.get(node1).add(node2);
            this.graph.get(node2).add(node1);

        }
        else {
            this.graph.get(node1).add(node2);
            this.graph.get(node2).add(node1);

        }
        
    }
    public void removeEdge(K node1, K node2){
        this.graph.get(node1).remove(node2);
        this.graph.get(node2).remove(node1);

    }
    public void removeNode(K node1){
        for(K value: this.graph.get(node1)){
            this.graph.get(value).remove(node1);
        }
        this.graph.remove(node1);
    }
    public void print(){
        System.out.println(this.graph.entrySet());
    }
}


public class Graphs {

    public static void main(String[] args){

    Graph<Integer> graph1 = new Graph<>();

    graph1.addEdge(1,2);
    graph1.addEdge(2,4);
    graph1.addEdge(2,3);
    graph1.addEdge(2,5);
    graph1.addEdge(1,5);
    graph1.addNode(10);

    graph1.print();

   graph1.removeEdge(3,2);

   graph1.print();

   graph1.removeNode(10);

   graph1.print();


    
}
}
