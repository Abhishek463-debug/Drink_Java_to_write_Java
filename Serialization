/*

Serialization: Converting data to bytestream to store in files, databases, persistent memory, pass around through networks
Deserialization: Converting bytes from files, databases, persistent memory, i/o from networks to bytestream to finally be converted to readable data

        Serialization                         Storage                 Deserialization
 Data -> ByteStream -> Persistent Memory, Databases, Files, Networks -> ByteStream -> Readable data
                       
  
Endianness: How data is stored in the memory.
Two types: Little Endian, Big Endian

Little Endian: The most significant bit of a number is stored in the largest memory address.

Big Endian: The most significant bit of a number is stored in the smallest memory address.

            Number (easy example: not accurate in terms of what actually happens as int is 4 bytes in Java)
            
            Memory address:      0x01 |0x02|0x03|0x04
            
            Little endian (1076)   6  | 7  | 0  |  1 |
            Big endian    (1076)   1  | 0  | 7  |  6 |
     */
 import java.util.*;
 import java.io.*;
 
class User implements Serializable {
     String name;
    int fav_number;
     String fav_food;

    User(String name, int fav_number, String fav_food){
        this.name = name;
        this.fav_number = fav_number;
        this.fav_food = fav_food;
    }
}


public class Serialize{

    public static void main(String[] args) throws IOException{

    User user = new User("Abhishek", 7, "Pizza");

    FileOutputStream fOut = new FileOutputStream("serialized.ser");

    ObjectOutputStream objOut = new ObjectOutputStream(fOut);

    //we either have to emphasize a throws error on the function ( in this case: IOException)
    //or we have to a try/catch block for fOut and objOut

    objOut.writeObject(user);
    objOut.writeInt(10);
    objOut.writeUTF("Strings are written as UTF-8");
    objOut.writeChar('A');
    objOut.writeBoolean(true);

    objOut.close();
    fOut.close();

    System.out.println("Check if everything is written into the new file created! (Serialized)");
    
    long serialVersionUID = ObjectStreamClass.lookup(user.getClass()).getSerialVersionUID();
        System.out.println(serialVersionUID);

    }


    
}
