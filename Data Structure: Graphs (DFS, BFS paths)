//Created a tuple data structure called Pair<X,Y> instead of downloading inbuilt library, and implemented DFS, BFS paths in Graph data structure
//Graph was in the form of HashMap<K, HashSet<K>> -> O(1) lookup, O(1) deletion, O(1) insertion (worst case: O(n))

//DFS gives a random path, BFS always gives shortest path.

import java.util.*;

class Pair<X,Y> {
    X one;
    Y two;

    Pair(X one, Y two){
        this.one = one;
        this.two = two;

    }
    public X get_first(){
        return this.one;
    }
    public Y get_second(){
        return this.two;
    }

}

class Graph<Node> {
    private HashMap<Node, HashSet<Node>> graph;

    Graph(){
        this.graph = new HashMap<>();
    }

    public void addNode(Node n){
        if(!this.graph.containsKey(n)){
            this.graph.put(n, new HashSet<>());
        }
    }
    public void addEdge(Node n, Node m){
        this.addNode(n);
        this.addNode(m);

        this.graph.get(n).add(m);
        this.graph.get(m).add(n);
    }

    public void removeEdge(Node m, Node n){
        if(this.graph.get(n).contains(m)){
            this.graph.get(n).remove(m);
        }
        if(this.graph.get(m).contains(n)){
            this.graph.get(m).remove(n);
        }
    }
    public void removeNode(Node n){
        if(this.graph.containsKey(n)){
            for(Node node: this.graph.get(n)){
                this.removeEdge(node, n);
                }
            }
            this.graph.remove(n);
        }

    public HashMap<Node, Node> dfs(Node root){ //get path from root to end in hashmap format
        HashMap<Node, Node> path = new HashMap<>();
        Stack<Pair<Node, Node>> stk = new Stack<>();
        stk.push(new Pair<>(null, root));
        while(!stk.empty()){
            Pair<Node, Node> pair = stk.pop();
            Node a = pair.get_first();
            Node b = pair.get_second();
            if(!path.containsKey(b)){
                path.put(b,a);
                for(Node n: this.graph.get(b)){
                    stk.push(new Pair<>(b,n));
                }
            }
        }
        return path;
    }
    public HashMap<Node, Node> bfs(Node root){ //get path from root to end in hashmap format
        HashMap<Node, Node> path = new HashMap<>();
        Queue<Pair<Node, Node>> queue = new LinkedList<>();
        queue.offer(new Pair<>(null, root));
        while(!queue.isEmpty()){
            Pair<Node, Node> pair = queue.poll();
            Node a = pair.get_first();
            Node b = pair.get_second();
            if(!path.containsKey(b)){
                path.put(b,a);
                for(Node n: this.graph.get(b)){
                    queue.offer(new Pair<>(b,n));
                }
            }
        }
        return path;
    }

    public ArrayList<Node> dfs_path(Node a, Node b){ //path in list format from a -> b (random path)
        ArrayList<Node> list = new ArrayList<>();
        HashMap<Node, Node> path = dfs(b);
        if(path.containsKey(a)){
            while(a!=null) {
            list.add(a);
            a = path.get(a);
            }
        }
        return list;
    }
    public ArrayList<Node> bfs_path(Node a, Node b){ //path in list format from a -> b (shortest path)
        ArrayList<Node> list = new ArrayList<>();
        HashMap<Node, Node> path = bfs(b);
        if(path.containsKey(a)){
            while(a!=null) {
            list.add(a);
            a = path.get(a);
            }
        }
        return list;
    }
    public String toString(){
        return this.graph.toString();
    }
    public int neighbors_count(Node n) {
        return this.graph.get(n).size();
    }
    }



public class Graphs {

    public static void main(String[] args){

    Graph<Character> graph1 = new Graph<>();

    graph1.addEdge('a', 'b');
    graph1.addEdge('b','c');
    graph1.addEdge('c','d');
    graph1.addEdge('a','d');
    graph1.addEdge('b', 'd');

    graph1.addEdge('d','e');
    graph1.addEdge('e','f');
//     graph1.addNode(10);

//     graph1.print();

//    graph1.removeEdge(3,2);

//    graph1.print();

//    graph1.removeNode(10);

//    graph1.print();

//    System.out.println("The number of nodes in the graph are: " + graph1.size());

//    graph1.removeEdge(11, 22);


//    Pair<Integer, Integer> p = new Pair<>(null, 1);


//    System.out.println(p);

//    String a = "Testing";

   //System.out.println(a.hashCode());

   System.out.println(graph1.dfs('a'));

   System.out.println(graph1.bfs('a'));

   System.out.println(graph1);

   System.out.println(graph1.dfs_path('a', 'f'));

   System.out.println(graph1.bfs_path('a','f'));

   System.out.println(graph1.neighbors_count('d'));
}
}
