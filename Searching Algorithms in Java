public class Searching {


    static <T> int linearSearch(T[]arr, T val){ //benefits: searching can be done without sorting (O(n)), sorting is quite a long process (O(nlogn))

        for(int i=0; i < arr.length; i++){
            if(arr[i].equals(val))return i;
        }
        return -1; //val not found
    }

    static int binarySearch(int[] arr, int val){ //my method : must be sorted

        int low = 0;
        int high = arr.length-1;
        
        while(low <= high){
            if (arr[high]==val) return high;
            int middle = (high+low)/2;
            if (arr[middle]==val) return middle;
            else if (arr[middle]> val){
                high = middle;
            }
            else low = middle;
        }
        return -1; //val not found
    }


    static int binarySearch2(int[] arr, int val){ //online method : must be sorted
        //O(logn) time
        int low = 0;
        int high = arr.length-1;
        while(low<=high){
            int middle = low +(high-low)/2;
            if(arr[middle] == val) return middle;
            else if(arr[middle] < val) low = middle + 1;
            else high = middle - 1;
        }

        return -1; //val not found
    }

    static int interpolationSearch(int[] arr, int val){ //must be sorted and evenly distributed elements, very rarely can be used

        //average time: O(log(log(n))), worst case: O(n)
        //Calculate bounds
        int low = 0;
        int high = arr.length - 1;

        while(low <= high && arr[low] <= val && val <= arr[high]){

            int probe = low + ((high-low) * (val - arr[low]))/(arr[high] - arr[low]);

            //System.out.println(probe);

            if(arr[probe] ==val) return probe;
            else if (arr[probe] > val) high = probe - 1;
            else low = probe + 1;


            //[1,2,3,4,5,6,7,8,9]

            //if 5 > 2, high = probe - 1
            //if 5 < 7, low = probe + 1



        }


        return -1; //val not found
    }

    public static int jumpSearch(int[] arr, int val){

        //must be sorted
        //we jump over m blocks each time in an arr of n element (n/m operations) then search through m-1 elements
        //Operations: n/m + (m-1), Complexity: O(sqrt(n)) minimal when m = sqrt(n)

        int jump = (int) Math.floor(Math.sqrt(arr.length));
        int lowerbound = 0;
        int upperbound = jump;

        while(upperbound < arr.length-1 && arr[upperbound]<val){

            lowerbound = upperbound;
            if(upperbound+jump > arr.length-1) upperbound = arr.length-1;
            else upperbound += jump;
           // System.out.println(lowerbound + " " + upperbound);
        }

        for(int i=lowerbound; i <= upperbound; i++){
            if(arr[i] == val) return i;
        }

        return -1;

    }

    public static void main(String[] args){

        Integer[] array = {10, 9, 5, 4, 11}; //note: T can only be a reference data type! (int, double, char, float don't work here)

       System.out.println(linearSearch(array, 11));

       int[] arr = {1,2,3,4,5,6,7,8,9,10};

       System.out.println(binarySearch2(arr, 10));
       System.out.println(binarySearch2(arr, 1));

       System.out.println(binarySearch(arr, 1));
       System.out.println(binarySearch(arr, 10));


       //[1,2,3,4,5,6,7,8] -> low = 0 ,high = 7, middle = 3

       int[] interpo = {1,2,3,4,5,6,7,8,9};

       System.out.println(interpolationSearch(interpo, 1));

       System.out.println(interpolationSearch(interpo, 5));


       int[] jumpcheck = {1,3,5,100, 200, 300};

       System.out.println(jumpSearch(jumpcheck, 300));
       System.out.println(jumpSearch(jumpcheck, 800));
       System.out.println(jumpSearch(jumpcheck, 3));
       




    
    }
    
}
